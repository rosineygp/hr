(defn rotate [d]
  (concat (drop 1 d) (take 1 d)))

(defn rotLeft [a d]
  (if (>= d 1)
    (recur (rotate a) (dec d))
    a))
; 5 4
; 1 2 3 4 5
(println (rotLeft [1 2 3 4 5] 4)) ; 5 1 2 3 4

; 20 10
; 41 73 89 7 10 1 59 58 84 77 77 97 58 1 86 58 26 10 86 51
(println (rotLeft [41 73 89 7 10 1 59 58 84 77 77 97 58 1 86 58 26 10 86 51] 10)) ; 77 97 58 1 86 58 26 10 86 51 41 73 89 7 10 1 59 58 84 77

; 15 13
; 33 47 70 37 8 53 13 93 71 72 51 100 60 87 97
(println (rotLeft [33 47 70 37 8 53 13 93 71 72 51 100 60 87 97] 13 )) ; 87 97 33 47 70 37 8 53 13 93 71 72 51 100 60

